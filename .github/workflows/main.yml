name: Action to build and publish the project as a nuget package to github package registry

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
      
jobs:
  build:
    runs-on: ubuntu-latest    
    outputs: 
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} 

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
        
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    
    #Build/pack the project
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x

    - name: Restore 
      run: dotnet restore src/ProjectoR.sln
    - name: Build 
      run: dotnet build src/ProjectoR.sln -p:Version='${{ steps.gitversion.outputs.SemVer }}' --configuration Release --no-restore
    - name: Test 
      run: dotnet test src/ProjectoR.sln --no-build --configuration Release
      
    - name: Pack Core NuGet package
      run: dotnet pack src/ProjectoR.Core/ProjectoR.Core.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' --no-build --configuration Release --output Core
    - name: Upload Core NuGet package to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: coreNuget
        path: bin/Release/Core
        
    - name: Pack EventStore NuGet package
      run: dotnet pack src/ProjectoR.EventStore/ProjectoR.EventStore.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' --no-build --configuration Release --output EventStore
    - name: Upload EventStore NuGet package to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: eventStoreNuget
        path: bin/Release/EventStore
        
    - name: Pack EntityFrameworkCore NuGet package
      run: dotnet pack src/ProjectoR.EntityFrameworkCore/ProjectoR.EntityFrameworkCore.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' --no-build --configuration Release --output EntityFrameworkCore
    - name: Upload EntityFrameworkCore NuGet package to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: entityFrameworkCore
        path: bin/Release/EntityFrameworkCore
        
  release:
    runs-on: ubuntu-latest    
    needs: build
    if: github.ref == 'refs/heads/main' # only run job if on the main branch   
    
    steps:  
    #Push NuGet package to GitHub packages
    - name: Prep package
      run: dotnet nuget add source --username PhilOterdahl --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/PhilOterdahl/index.json"
      
    - name: Download Core nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: core
    - name: Push Core package to GitHub packages 
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
      run: dotnet nuget push core/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github"

    - name: Download EventStore nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
         name: eventStore
    - name: Push EventStore package to GitHub packages 
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
      run: dotnet nuget push eventStore/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github"

    - name: Download EntityFrameworkCore nuget package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: entityFrameworkCore
    - name: Push entityFrameworkCore package to GitHub packages 
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
      run: dotnet nuget push entityFrameworkCore/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github"
    
    #Create release
    - name: Create Release
      if: 1 == 0 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.NUGET_PACKAGE_TOKEN }} 
      with:
        tag_name: ${{ needs.build.outputs.Version }}
        release_name: Release ${{ needs.build.outputs.Version }}
    - name: Create Release
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.build.outputs.Version }}
        name: Release ${{ needs.build.outputs.Version }}
        artifacts: "core/*, eventStore/*, entityFrameWorkCore/*"
        token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
